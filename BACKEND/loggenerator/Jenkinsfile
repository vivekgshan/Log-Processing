pipeline {
    agent any

    tools {
        maven 'Maven3'   // Make sure Maven3 is configured in Jenkins "Global Tool Configuration"
    }

    stages {
        stage('Clone Code') {
            steps {
                echo "üì• Cloning code from GitHub..."
                git branch: 'ramtest3', url: 'https://github.com/vivekgshan/Log-Processing.git'
            }
        }

        stage('Build JAR') {
            steps {
                echo "‚öôÔ∏è Building JAR with Maven..."
                script {
                    if (isUnix()) {
                        sh 'mvn -f Backend/loggenerator/pom.xml clean package -DskipTests'
                    } else {
                        bat 'mvn -f Backend\\loggenerator\\pom.xml clean package -DskipTests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                script {
                    if (isUnix()) {
                        sh '''
                        docker rm -f loggenerator || true
                        docker build -t loggenerator:latest -f Backend/loggenerator/Dockerfile .
                        '''
                    } else {
                        bat 'docker rm -f loggenerator || exit 0'
                        bat 'docker build -t loggenerator:latest -f Backend\\loggenerator\\Dockerfile .'
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                echo "üöÄ Running loggenerator container..."
                script {
                    if (isUnix()) {
                        sh 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    } else {
                        bat 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üîç Checking if app is up on port 8783..."
                script {
                    if (isUnix()) {
                        sh '''
                        for i in {1..10}; do
                          if curl -s http://localhost:8783/logs > /dev/null; then
                            echo "‚úÖ App is up!"
                            exit 0
                          fi
                          echo "‚è≥ Waiting for app... ($i/10)"
                          sleep 5
                        done
                        echo "‚ùå App did not start in time"
                        exit 1
                        '''
                    } else {
                        powershell '''
                        $maxRetries = 10
                        $success = $false
                        for ($i=1; $i -le $maxRetries; $i++) {
                          try {
                            Invoke-WebRequest -UseBasicParsing http://localhost:8783/logs | Out-Null
                            Write-Host "‚úÖ App is up!"
                            $success = $true
                            break
                          } catch {
                            Write-Host "‚è≥ Waiting for app... ($i/$maxRetries)"
                            Start-Sleep -Seconds 5
                          }
                        }
                        if (-not $success) {
                          Write-Host "‚ùå App did not start in time"
                          exit 1
                        }
                        '''
                    }
                }
            }
        }

        stage('Show Logs if Failed') {
            when {
                expression { currentBuild.result == 'FAILURE' }
            }
            steps {
                echo "üìú Showing container logs for debugging..."
                script {
                    if (isUnix()) {
                        sh 'docker logs loggenerator || true'
                    } else {
                        bat 'docker logs loggenerator || exit 0'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "‚ö†Ô∏è Containers are NOT auto-removed for debugging."
            echo "   Run manually: docker ps -a | docker logs loggenerator"
        }
    }
}
