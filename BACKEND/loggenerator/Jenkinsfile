pipeline {
    agent any

    tools {
        maven 'Maven3'   // make sure "Maven3" is configured in Jenkins -> Global Tool Config
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'ramtest3', url: 'https://github.com/vivekgshan/Log-Processing.git'
            }
        }

        stage('Build JAR') {
            steps {
                dir('Backend/loggenerator') {
                    echo "üì¶ Building JAR with Maven..."
                    script {
                        if (isUnix()) {
                            sh 'mvn clean package -DskipTests'
                        } else {
                            bat 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                script {
                    if (isUnix()) {
                        sh 'docker rm -f loggenerator || true'
                        sh 'docker build -t loggenerator:latest -f Backend/loggenerator/Dockerfile Backend/loggenerator'
                    } else {
                        bat 'docker rm -f loggenerator || exit 0'
                        bat 'docker build -t loggenerator:latest -f Backend\\loggenerator\\Dockerfile Backend\\loggenerator'
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                echo "üöÄ Running container..."
                script {
                    if (isUnix()) {
                        sh 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    } else {
                        bat 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üîç Checking if application is up..."
                script {
                    if (isUnix()) {
                        sh '''
                        for i in {1..10}; do
                          if curl -s http://localhost:8783/logs > /dev/null; then
                            echo "‚úÖ App is up!"
                            exit 0
                          fi
                          echo "Waiting for app... ($i/10)"
                          sleep 5
                        done
                        echo "‚ùå App did not start in time"
                        exit 1
                        '''
                    } else {
                        powershell '''
                        $maxRetries = 10
                        $success = $false
                        for ($i=1; $i -le $maxRetries; $i++) {
                          try {
                            Invoke-WebRequest -UseBasicParsing http://localhost:8783/logs | Out-Null
                            Write-Host "‚úÖ App is up!"
                            $success = $true
                            break
                          } catch {
                            Write-Host "Waiting for app... ($i/$maxRetries)"
                            Start-Sleep -Seconds 5
                          }
                        }
                        if (-not $success) {
                          Write-Host "‚ùå App did not start in time"
                          exit 1
                        }
                        '''
                    }
                }
            }
        }

        stage('Show Logs if Failed') {
            when {
                expression { currentBuild.result == 'FAILURE' }
            }
            steps {
                echo "üìú Showing last 100 lines of logs..."
                script {
                    if (isUnix()) {
                        sh 'docker logs --tail 100 loggenerator || true'
                    } else {
                        bat 'docker logs --tail 100 loggenerator || exit 0'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "‚ö†Ô∏è Pipeline finished. Containers still running:"
            script {
                if (isUnix()) {
                    sh 'docker ps -a'
                } else {
                    bat 'docker ps -a'
                }
            }
        }
    }
}
