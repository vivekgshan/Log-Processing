pipeline {
    agent any

    tools {
        maven 'Maven3'   // Jenkins global tool installation
    }

    stages {
        stage('Clone Code') {
            steps {
                echo "üì• Cloning branch ramtest3..."
                git branch: 'ramtest3', url: 'https://github.com/vivekgshan/Log-Processing.git'
            }
        }

        stage('Build JAR') {
            steps {
                echo "‚öôÔ∏è Building JAR..."
                script {
                    if (isUnix()) {
                        sh 'mvn -f BACKEND/loggenerator/pom.xml clean package -DskipTests'
                    } else {
                        bat 'mvn -f BACKEND\\loggenerator\\pom.xml clean package -DskipTests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                script {
                    def jarName = ''
                    if (isUnix()) {
                        jarName = sh(
                            script: "ls BACKEND/loggenerator/target/*.jar | head -n 1",
                            returnStdout: true
                        ).trim()
                        sh "docker build -t loggenerator:latest --build-arg JAR_FILE=${jarName} -f BACKEND/loggenerator/Dockerfile ."
                    } else {
                        jarName = bat(
                            script: 'for %i in (BACKEND\\loggenerator\\target\\*.jar) do @echo %i',
                            returnStdout: true
                        ).trim()
                        bat "docker build -t loggenerator:latest --build-arg JAR_FILE=${jarName} -f BACKEND\\loggenerator\\Dockerfile ."
                    }
                    echo "üì¶ Using JAR file: ${jarName}"
                }
            }
        }

        stage('Run Container') {
            steps {
                echo "üöÄ Running container..."
                script {
                    if (isUnix()) {
                        sh 'docker rm -f loggenerator || true'
                        sh 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    } else {
                        bat 'docker rm -f loggenerator || exit 0'
                        bat 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üîç Checking if app is alive on port 8783..."
                script {
                    if (isUnix()) {
                        sh '''
                        for i in {1..10}; do
                          if curl -s http://localhost:8783/logs > /dev/null; then
                            echo "‚úÖ App is responding at /logs!"
                            exit 0
                          fi
                          echo "Waiting for app... ($i/10)"
                          sleep 5
                        done
                        echo "‚ùå App did not start in time"
                        exit 1
                        '''
                    } else {
                        powershell '''
                        $maxRetries = 10
                        for ($i=1; $i -le $maxRetries; $i++) {
                          try {
                            Invoke-WebRequest -UseBasicParsing http://localhost:8783/logs | Out-Null
                            Write-Host "‚úÖ App is responding at /logs!"
                            exit 0
                          } catch {
                            Write-Host "Waiting for app... ($i/$maxRetries)"
                            Start-Sleep -Seconds 5
                          }
                        }
                        Write-Host "‚ùå App did not start in time"
                        exit 1
                        '''
                    }
                }
            }
        }
    }
}
