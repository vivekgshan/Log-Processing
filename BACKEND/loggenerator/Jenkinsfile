pipeline {
    agent any

    stages {
        stage('Clone Code') {
            steps {
                echo "üîÑ Cloning code from GitHub..."
                git branch: 'ramtest1', url: 'https://github.com/vivekgshan/Log-Processing.git'
            }
        }

        stage('Build with Maven') {
            steps {
                echo "üì¶ Running mvn clean package..."
                script {
                    if (isUnix()) {
                        sh 'mvn -f Backend/loggenerator/pom.xml clean package -DskipTests'
                    } else {
                        bat 'mvn -f Backend\\loggenerator\\pom.xml clean package -DskipTests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                script {
                    if (isUnix()) {
                        sh 'docker build -t loggenerator:latest Backend/loggenerator'
                    } else {
                        bat 'docker build -t loggenerator:latest Backend\\loggenerator'
                    }
                }
            }
        }

        stage('Run Container') {
            steps {
                echo "üöÄ Running Docker container..."
                script {
                    if (isUnix()) {
                        sh '''
                        docker rm -f loggenerator || true
                        docker run -d --name loggenerator -p 8783:8783 loggenerator:latest
                        '''
                    } else {
                        bat 'docker rm -f loggenerator || exit 0'
                        bat 'docker run -d --name loggenerator -p 8783:8783 loggenerator:latest'
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üí° Checking if application is up..."
                script {
                    if (isUnix()) {
                        sh '''
                        for i in {1..10}; do
                          if curl -s http://localhost:8783/logs > /dev/null; then
                            echo "‚úÖ App is up!"
                            exit 0
                          fi
                          echo "Waiting for app... ($i/10)"
                          sleep 5
                        done
                        echo "‚ùå App did not start in time"
                        exit 1
                        '''
                    } else {
                        powershell '''
                        $maxRetries = 10
                        $success = $false
                        for ($i=1; $i -le $maxRetries; $i++) {
                          try {
                            Invoke-WebRequest -UseBasicParsing http://localhost:8783/logs | Out-Null
                            Write-Host "‚úÖ App is up!"
                            $success = $true
                            break
                          } catch {
                            Write-Host "Waiting for app... ($i/$maxRetries)"
                            Start-Sleep -Seconds 5
                          }
                        }
                        if (-not $success) {
                          Write-Host "‚ùå App did not start in time"
                          exit 1
                        }
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "‚ö†Ô∏è Debug Info: Run 'docker ps -a' and 'docker logs loggenerator' if app fails."
        }
    }
}
