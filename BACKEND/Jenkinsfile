pipeline {
    agent any

    tools {
        maven 'Maven3'
    }

    environment {
        // EC2 connection details
        EC2_1 = "ec2-user@ip-172-31-39-213"   // loggenerator + loglistener
        EC2_2 = "ubuntu@52.66.201.133"   // logcollector + persistors + loganalyser
        EC2_3 = "ubuntu@<EC2-3-PUBLIC-IP>"   // UI
        REPO_URL = "https://github.com/vivekgshan/Log-Processing.git"
        BRANCH = "dev-ram"
        DEPLOY_DIR = "/home/ubuntu/Log-Processing"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo "üì• Checking out code from GitHub branch ${BRANCH}..."
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Build JARs') {
            steps {
                echo "üî® Building JARs for all microservices..."
                script {
                    def services = [
                        'loggenerator',
                        'loglistener',
                        'logcollector',
                        'loginfopersistor',
                        'logwarnpersistor',
                        'logdebugpersistor',
                        'logerrorpersistor',
                        'loganalyser'
                    ]
                    for (svc in services) {
                        if (isUnix()) {
                            sh "mvn -f Backend/${svc}/pom.xml clean package -DskipTests"
                        } else {
                            bat "mvn -f Backend\\${svc}\\pom.xml clean package -DskipTests"
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                echo "üê≥ Building Docker images for all microservices..."
                script {
                    def services = [
                        'loggenerator',
                        'loglistener',
                        'logcollector',
                        'loginfopersistor',
                        'logwarnpersistor',
                        'logdebugpersistor',
                        'logerrorpersistor',
                        'loganalyser',
                        'ui'
                    ]
                    for (svc in services) {
                        if (isUnix()) {
                            sh "docker build -t ${svc}:latest -f Backend/${svc}/Dockerfile ."
                        } else {
                            bat "docker build -t ${svc}:latest -f Backend\\${svc}\\Dockerfile ."
                        }
                    }
                }
            }
        }

        stage('Deploy to EC2-1') {
            steps {
                echo "üöÄ Deploying loggenerator + loglistener to EC2-1..."
                sh """
                    ssh -o StrictHostKeyChecking=no ${EC2_1} '
                        if [ ! -d ${DEPLOY_DIR} ]; then
                            git clone -b ${BRANCH} ${REPO_URL} ${DEPLOY_DIR}
                        else
                            cd ${DEPLOY_DIR} && git fetch && git checkout ${BRANCH} && git pull
                        fi
                        cd ${DEPLOY_DIR}/Deployment && docker-compose -f docker-compose-1.yml down
                        cd ${DEPLOY_DIR}/Deployment && docker-compose -f docker-compose-1.yml up -d --build
                    '
                """
            }
        }

        stage('Deploy to EC2-2') {
            steps {
                echo "üöÄ Deploying logcollector + persistors + loganalyser to EC2-2..."
                sh """
                    ssh -o StrictHostKeyChecking=no ${EC2_2} '
                        if [ ! -d ${DEPLOY_DIR} ]; then
                            git clone -b ${BRANCH} ${REPO_URL} ${DEPLOY_DIR}
                        else
                            cd ${DEPLOY_DIR} && git fetch && git checkout ${BRANCH} && git pull
                        fi
                        cd ${DEPLOY_DIR}/Deployment && docker-compose -f docker-compose-2.yml down
                        cd ${DEPLOY_DIR}/Deployment && docker-compose -f docker-compose-2.yml up -d --build
                    '
                """
            }
        }

        stage('Deploy to EC2-3') {
            steps {
                echo "üöÄ Deploying UI to EC2-3..."
                sh """
                    ssh -o StrictHostKeyChecking=no ${EC2_3} '
                        if [ ! -d ${DEPLOY_DIR} ]; then
                            git clone -b ${BRANCH} ${REPO_URL} ${DEPLOY_DIR}
                        else
                            cd ${DEPLOY_DIR} && git fetch && git checkout ${BRANCH} && git pull
                        fi
                        cd ${DEPLOY_DIR}/Deployment && docker-compose -f docker-compose-3.yml down
                        cd ${DEPLOY_DIR}/Deployment && docker-compose -f docker-compose-3.yml up -d --build
                    '
                """
            }
        }
    }

    post {
        always {
            echo "‚ö†Ô∏è Checking containers on all EC2s..."
            sh """
                ssh -o StrictHostKeyChecking=no ${EC2_1} "docker ps"
                ssh -o StrictHostKeyChecking=no ${EC2_2} "docker ps"
                ssh -o StrictHostKeyChecking=no ${EC2_3} "docker ps"
            """
        }
    }
}
