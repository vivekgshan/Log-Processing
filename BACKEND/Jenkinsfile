pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'dev-cloud-banu', description: 'Git branch to build')
        string(name: 'DOCKERHUB_REPO', defaultValue: 'pansura/demo', description: 'DockerHub repo')

        choice(name: 'CLEAN_IMAGES', choices: ['no', 'yes'], description: 'Prune old images before build?')
        choice(name: 'CLEAN_CONTAINERS', choices: ['no', 'yes'], description: 'Prune old containers before build?')

        // Service toggles
        choice(name: 'BUILD_LOGCOLLECTOR', choices: ['yes', 'no'], description: 'Build & push logcollector?')
        choice(name: 'BUILD_LOGERRORPERSISTOR', choices: ['yes', 'no'], description: 'Build & push logerrorpersistor?')
        choice(name: 'BUILD_LOGDEBUGPERSISTOR', choices: ['yes', 'no'], description: 'Build & push logdebugpersistor?')
        choice(name: 'BUILD_LOGWARNPERSISTOR', choices: ['yes', 'no'], description: 'Build & push logwarnpersistor?')
        choice(name: 'BUILD_LOGINFOPERSISTOR', choices: ['yes', 'no'], description: 'Build & push loginfopersistor?')
        choice(name: 'BUILD_LOGANALYSER', choices: ['yes', 'no'], description: 'Build & push loganalyser?')
    }

    environment {
        BACKEND_DIR = "BACKEND"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH}", url: 'https://github.com/vivekgshan/Log-Processing.git'
            }
        }

        stage('Clean Up Old Stack') {
            steps {
                dir("${BACKEND_DIR}") {
                    script {
                         echo "Stopping old stack..."
                         sh 'docker compose -f docker-compose.yaml down || true'

                        if (params.CLEAN_IMAGES == 'yes') {
                            sh 'docker image prune -af || true'
                        }

                        if (params.CLEAN_CONTAINERS == 'yes') {
                            sh 'docker container prune -f || true'
                        }
                    }
                }
            }
        }

   stage('Prepare Configs') {
    steps {
        dir("${BACKEND_DIR}") {
            script {
                echo "üîß Ensuring prometheus.yml is valid..."
                sh '''
                    if [ -d prometheus.yml ]; then
                        echo "‚ö†Ô∏è Found prometheus.yml as a directory, removing..."
                        rm -rf prometheus.yml
                    fi

                    if [ ! -f prometheus.yml ]; then
                        echo "‚ùå prometheus.yml not found in BACKEND. Please add it."
                        exit 1
                    fi

                    echo "==== prometheus.yml status ===="
                    ls -l prometheus.yml
                    file prometheus.yml || true
                '''
            }
        }
    }
}

        stage('Build & Push Selected Services') {
            steps {
                dir("${BACKEND_DIR}") {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub',
                                                          usernameVariable: 'DOCKERHUB_USER',
                                                          passwordVariable: 'DOCKERHUB_PASS')]) {
                            sh 'echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin'

                            def services = [
                                [name: 'logcollector',      toggle: params.BUILD_LOGCOLLECTOR],
                                [name: 'logerrorpersistor', toggle: params.BUILD_LOGERRORPERSISTOR],
                                [name: 'logdebugpersistor', toggle: params.BUILD_LOGDEBUGPERSISTOR],
                                [name: 'logwarnpersistor',  toggle: params.BUILD_LOGWARNPERSISTOR],
                                [name: 'loginfopersistor',  toggle: params.BUILD_LOGINFOPERSISTOR],
                                [name: 'loganalyser',       toggle: params.BUILD_LOGANALYSER]
                            ]

                            for (svc in services) {
                                if (svc.toggle == 'yes') {
                                    echo "üöÄ Building ${svc.name}..."
                                    sh "docker compose -f docker-compose.yaml build ${svc.name}"
                                    echo "üì¶ Tagging and pushing ${svc.name}..."
                                    sh """
                                        docker tag backend-${svc.name}:latest ${params.DOCKERHUB_REPO}:${svc.name}
                                        docker push ${params.DOCKERHUB_REPO}:${svc.name}
                                    """
                                } else {
                                    echo "‚è© Skipping ${svc.name}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy New Stack') {
            steps {
                dir("${BACKEND_DIR}") {
                    script {
                        echo "Starting new stack..."
                        sh 'docker compose -f docker-compose.yaml up -d'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "==== Final Docker State ===="
            sh 'docker ps -a || true'
            sh 'docker images || true'
        }
    }
}
