version: "3.8"

services:

  db:
    container_name: postgresdb
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: logdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - /home/ubuntu/log/pgdata:/var/lib/postgresql/data
    networks:
      - logprocessing_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d logdata"]
      interval: 10s
      timeout: 5s
      retries: 5

  logcollector:
    container_name: logcollector
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/logcollector:${IMAGE_TAG}
    ports:
      - "8789:8789"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logdata
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVER_PORT: 8789
      LOG_INFO_PERSISTOR_URL: http://loginfopersistor:8783/info
      LOG_WARN_PERSISTOR_URL: http://logwarnpersistor:8784/warn
      LOG_ERROR_PERSISTOR_URL: http://logerrorpersistor:8782/error
      LOG_DEBUG_PERSISTOR_URL: http://logdebugpersistor:8781/debug
    volumes:
      - /home/ubuntu/log:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - logprocessing_net
    restart: always

  loginfopersistor:
    container_name: loginfopersistor
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/loginfopersistor:${IMAGE_TAG}
    ports:
      - "8783:8783"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logdata
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVER_PORT: 8783
    depends_on:
      db:
        condition: service_healthy
    networks:
      - logprocessing_net
    restart: always

  logwarnpersistor:
    container_name: logwarnpersistor
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/logwarnpersistor:${IMAGE_TAG}
    ports:
      - "8784:8784"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logdata
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVER_PORT: 8784
    depends_on:
      db:
        condition: service_healthy
    networks:
      - logprocessing_net
    restart: always

  logdebugpersistor:
    container_name: logdebugpersistor
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/logdebugpersistor:${IMAGE_TAG}
    ports:
      - "8781:8781"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logdata
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVER_PORT: 8781
    depends_on:
      db:
        condition: service_healthy
    networks:
      - logprocessing_net
    restart: always

  logerrorpersistor:
    container_name: logerrorpersistor
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/logerrorpersistor:${IMAGE_TAG}
    ports:
      - "8782:8782"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logdata
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVER_PORT: 8782
    depends_on:
      db:
        condition: service_healthy
    networks:
      - logprocessing_net
    restart: always

  loganalyser:
    container_name: loganalyser
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/loganalyser:${IMAGE_TAG}
    ports:
      - "8086:8086"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/logdata
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVER_PORT: 8086
      FRONTEND_URL: http://logfrontend:80
    depends_on:
      db:
        condition: service_healthy
    networks:
      - logprocessing_net
    restart: always

  frontend:
    container_name: logfrontend
    image: ${ECR_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/frontend:${IMAGE_TAG}
    ports:
      - "3001:80"
    depends_on:
      - logcollector
      - loginfopersistor
      - logwarnpersistor
      - logdebugpersistor
      - logerrorpersistor
      - loganalyser
    networks:
      - logprocessing_net
    restart: always

volumes:
  pgdata:
  log:

networks:
  logprocessing_net:
    driver: bridge
