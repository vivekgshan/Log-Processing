pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "srini314" // Replace with your DockerHub username
        FRONTEND_IMAGE = "${DOCKER_REGISTRY}/log-processing-frontend"
        BACKEND_IMAGE  = "${DOCKER_REGISTRY}/log-processing-backend"
        TAG = "latest"
        FRONTEND_PORT = "3001"
        BACKEND_PORT  = "8081"
        EC2_PUBLIC_IP = "your.ec2.public.ip" // Replace with your actual EC2 IP
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('FRONTEND') {
                    sh """
                        docker build -t ${FRONTEND_IMAGE}:${TAG} .
                        docker push ${FRONTEND_IMAGE}:${TAG}
                    """
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('BACKEND/logvampersistor') {
                    sh """
                        mvn clean package -DskipTests
                        docker build -t ${BACKEND_IMAGE}:${TAG} .
                        docker push ${BACKEND_IMAGE}:${TAG}
                    """
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh """
                    trivy image --exit-code 0 --severity HIGH ${FRONTEND_IMAGE}:${TAG}
                    trivy image --exit-code 0 --severity HIGH ${BACKEND_IMAGE}:${TAG}
                """
            }
        }

        stage('Deploy Containers') {
            steps {
                sh """
                    docker rm -f log-processing-frontend || true
                    docker rm -f log-processing-backend || true

                    docker run -d -p ${FRONTEND_PORT}:3000 --name log-processing-frontend ${FRONTEND_IMAGE}:${TAG}
                    docker run -d -p ${BACKEND_PORT}:8080 --name log-processing-backend ${BACKEND_IMAGE}:${TAG}
                """
            }
        }

        stage('Health Check') {
            steps {
                sh """
                    curl --fail http://${EC2_PUBLIC_IP}:${FRONTEND_PORT} || echo "‚ùå Frontend not responding"
                    curl --fail http://${EC2_PUBLIC_IP}:${BACKEND_PORT}/actuator/health || echo "‚ùå Backend not responding"
                """
            }
        }
    }

    post {
        always {
            sh 'docker logout || true'
            echo "üì¶ Pipeline finished"
        }
        success {
            echo "‚úÖ Frontend: http://${EC2_PUBLIC_IP}:${FRONTEND_PORT}"
            echo "‚úÖ Backend:  http://${EC2_PUBLIC_IP}:${BACKEND_PORT}/actuator/health"
        }
        failure {
            echo "‚ùå Deployment failed. Check logs for details."
        }
    }
}
